# Standard library imports
import argparse
import os
from pathlib import Path

# Third-party imports
from automl.dataloader import ConfigData, OriginalData, load_data
from automl.library import Logger


def ensure_folder_exists(root: Path, filename: str | Path | None) -> None:
    """
    Ensure that the folder required for a given file inside `root` exists.
    If the folder does not exist, it is created recursively.

    Parameters
    ----------
    root : Path
        The root directory against which the filename is resolved.
    filename : str | Path | None
        The relative filename within `root`. If None or empty, nothing is done.
    """
    if not filename:
        return

    folder_path = os.path.dirname(os.path.join(str(root), str(filename)))
    if folder_path and not os.path.exists(folder_path):
        os.makedirs(folder_path, exist_ok=True)


def create_config_paths(config: ConfigData) -> None:
    """
    Create all necessary directories for the paths specified in a configuration.

    Parameters
    ----------
    config : ConfigData
        The configuration object containing file and directory paths.
    """
    for field_name, value in config:
        if field_name not in ("root", "project_name"):
            ensure_folder_exists(root=config.root, filename=value)


def get_config_from_title(title: str) -> ConfigData:
    """
    Create a `ConfigData` object from a given project title.
    Automatically generates standard paths for training, testing,
    logging, and reporting.

    Parameters
    ----------
    title : str
        The title or project name.

    Returns
    -------
    ConfigData
        The generated configuration object, also saved as YAML.
    """
    config = ConfigData(
        project_name=title,
        training_file=Path(f"personal/{title}/data/train.csv"),
        target=None,
        competition_file=Path(f"personal/{title}/data/test.csv"),
        submission_file=Path(f"personal/{title}/data/submission.csv"),
        report_template=Path(f"personal/{title}/export/{title}_report.html"),
        log_file=Path(f"personal/{title}/log/{title}.log"),
    )

    filename = f"personal/yaml/{config.project_name}.yaml"
    ensure_folder_exists(root=config.root, filename=filename)
    config.save_to_yaml(filename=filename)

    return config


def get_config() -> ConfigData:
    """
    Parse command-line arguments to load or generate a configuration.

    Returns
    -------
    ConfigData
        The configuration object loaded from file or generated by title.
    """
    parser = argparse.ArgumentParser(
        description="Automated Machine Learning application"
    )
    parser.add_argument(
        "--title", type=str, required=False, help="Title of the project"
    )
    parser.add_argument(
        "--config", type=str, required=False, help="Path to config file (.yaml)"
    )

    args = parser.parse_args()

    if args.config:
        config = ConfigData.load_from_yaml(filename=args.config)
    else:
        title = args.title if args.title else "Titanic"
        config = get_config_from_title(title=title)

    create_config_paths(config=config)
    return config


def main() -> None:
    """
    Main entry point of the application.
    Loads configuration, initializes logging, loads data, and prints dataset shapes.
    """
    config: ConfigData = get_config()

    logger = Logger(
        level_console=Logger.INFO,
        level_file=Logger.DEBUG,
        filename=config.log_file,
        wx_handler=None,
    )

    original_data: OriginalData = load_data(config=config, logger=logger)

    print("Training features shape:", original_data.X_train.shape)
    print("Training target shape:", original_data.y_train.shape)

    if original_data.X_comp is not None:
        print("Competition features shape:", original_data.X_comp.shape)


if __name__ == "__main__":
    main()
