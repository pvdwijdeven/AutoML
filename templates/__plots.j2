<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Interactive EDA Report</title>
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
  <style>
    body { font-family: sans-serif; padding: 2em; }
    label, select { margin-right: 1em; }
    #controls { margin-bottom: 2em; }
  </style>
</head>
<body>
  <h1>Interactive EDA Report</h1>

  <div id="controls">
    <label>Main Feature:
      <select id="mainFeature"></select>
    </label>
    <label>Second Feature:
      <select id="secondFeature"></select>
    </label>
    <label>Target:
      <select id="targetFeature"></select>
    </label>
    <label>Plot Type:
      <select id="plotType">
        <option value="auto">Auto</option>
        <option value="histogram">Histogram</option>
        <option value="box">Box</option>
        <option value="bar">Bar</option>
        <option value="scatter">Scatter</option>
        <option value="heatmap">Heatmap</option>
      </select>
    </label>
    <button onclick="updatePlots()">Generate</button>
  </div>

  <div id="plots"></div>

  <script>
    const data = {{ df_json | safe }};
    const cols = {{ columns | tojson }};
    
    const mainSelect = document.getElementById("mainFeature");
    const secondSelect = document.getElementById("secondFeature");
    const targetSelect = document.getElementById("targetFeature");

    for (const col of cols) {
      [mainSelect, secondSelect, targetSelect].forEach(select => {
        const opt = document.createElement("option");
        opt.value = col;
        opt.textContent = col;
        select.appendChild(opt.cloneNode(true));
      });

      // Allow "None" for second and target
      const emptyOpt = document.createElement("option");
      emptyOpt.value = "";
      emptyOpt.textContent = "(None)";
      secondSelect.insertBefore(emptyOpt.cloneNode(true), secondSelect.firstChild);
      targetSelect.insertBefore(emptyOpt.cloneNode(true), targetSelect.firstChild);
    }

    function getColumnValues(col) {
      return data.map(row => row[col]);
    }

    function inferType(values) {
      const nums = values.filter(v => typeof v === "number" && !isNaN(v));
      return nums.length > values.length / 2 ? "numeric" : "categorical";
    }

    function updatePlots() {
      const main = mainSelect.value;
      const second = secondSelect.value || null;
      const target = targetSelect.value || null;
      const plotType = document.getElementById("plotType").value;

      const mainVals = getColumnValues(main);
      const secondVals = second ? getColumnValues(second) : null;
      const targetVals = target ? getColumnValues(target) : null;

      const mainType = inferType(mainVals);
      const secondType = second ? inferType(secondVals) : null;
      const targetType = target ? inferType(targetVals) : null;

      const plotsDiv = document.getElementById("plots");
      plotsDiv.innerHTML = "";

      // Plot 1: Distribution of main feature
      let fig1;
      if (plotType === "box" || (plotType === "auto" && mainType === "numeric")) {
        fig1 = {
          data: [{ y: mainVals, type: "box", name: main }],
          layout: { title: `Box plot of ${main}` }
        };
      } else if (plotType === "histogram" || (plotType === "auto" && mainType === "numeric")) {
        fig1 = {
          data: [{ x: mainVals, type: "histogram", name: main }],
          layout: { title: `Histogram of ${main}` }
        };
      } else {
        const counts = {};
        mainVals.forEach(v => counts[v] = (counts[v] || 0) + 1);
        fig1 = {
          data: [{
            x: Object.keys(counts),
            y: Object.values(counts),
            type: "bar",
            name: main
          }],
          layout: { title: `Bar plot of ${main}` }
        };
      }
      Plotly.newPlot(plotsDiv.appendChild(document.createElement("div")), fig1.data, fig1.layout);

      // Plot 2: Main vs Target or Second
      if (second || target) {
        const x = mainVals;
        const y = secondVals || targetVals;
        const yLabel = second || target;
        const yType = secondType || targetType;

        let fig2;
        if (plotType === "scatter" || (plotType === "auto" && mainType === "numeric" && yType === "numeric")) {
          fig2 = {
            data: [{ x, y, mode: "markers", type: "scatter", name: `${main} vs ${yLabel}` }],
            layout: { title: `${main} vs ${yLabel}` }
          };
        } else if (plotType === "heatmap" || (plotType === "auto" && mainType !== "numeric" && yType !== "numeric")) {
          const z = {};
          x.forEach((a, i) => {
            const b = y[i];
            const key = a + "|" + b;
            z[key] = (z[key] || 0) + 1;
          });
          const xCats = [...new Set(x)];
          const yCats = [...new Set(y)];
          const zMatrix = yCats.map(b => xCats.map(a => z[a + "|" + b] || 0));
          fig2 = {
            data: [{
              z: zMatrix,
              x: xCats,
              y: yCats,
              type: "heatmap",
              colorscale: "Blues"
            }],
            layout: { title: `${main} vs ${yLabel} (Heatmap)` }
          };
        } else {
          fig2 = {
            data: [{
              x,
              y,
              type: "box",
              name: `${yLabel}`
            }],
            layout: { title: `${yLabel} per ${main}` }
          };
        }
        Plotly.newPlot(plotsDiv.appendChild(document.createElement("div")), fig2.data, fig2.layout);
      }
    }
  </script>
</body>
</html>
